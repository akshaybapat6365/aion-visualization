const fs=require('fs').promises;const path=require('path');async function updateAllPages(){const phase3Scripts=['<script src="advanced-animations.js"></script>','<script src="gesture-controller.js"></script>','<script src="contextual-help.js"></script>','<script src="keyboard-shortcuts.js"></script>','<script src="smart-asset-loader.js"></script>','<script src="adaptive-quality.js"></script>','<script src="learning-analytics.js"></script>','<script src="production-error-handler.js"></script>','<script src="apply-visual-polish.js"></script>'];const phase3Styles=['<link rel="stylesheet" href="styles-v3.css">'];const initScript=`<script>document.addEventListener('DOMContentLoaded',function(){const visualizations=document.querySelectorAll('.visualization-container,canvas');visualizations.forEach(viz=>{if(viz.tagName==='CANVAS'){new GestureController(viz);}});const contextualHelp=new ContextualHelp({enabled:true,sensitivity:'medium'});const adaptiveQuality=new AdaptiveQuality({enableAutoAdjust:true,targetFPS:60});const learningAnalytics=new LearningAnalytics({enableTracking:true,privacyLevel:'balanced'});const errorHandler=new ProductionErrorHandler({enableMonitoring:true,enableRecovery:true});const chapterMatch=window.location.pathname.match(/chapter(\\d+)/);if(chapterMatch){learningAnalytics.trackEvent('chapter-visit',{chapterId:parseInt(chapterMatch[1]),enhanced:window.location.pathname.includes('enhanced')});}});</script>`;const htmlFiles=['chapters.html','enhanced-chapters.html','timeline.html','symbols.html','about.html',...Array.from({length:14},(_,i)=>`chapter${i+1}.html`),...Array.from({length:8},(_,i)=>`enhanced-chapter${i+4}.html`)];let updatedCount=0;for(const file of htmlFiles){try{const filePath=path.join('/Users/akshaybapat/aion-visualization',file);let content=await fs.readFile(filePath,'utf8');let updated=false;if(!content.includes('styles-v3.css')){content=content.replace('<link rel="stylesheet" href="styles-v3.css">','<link rel="stylesheet" href="styles-v3.css">\n '+phase3Styles[0]);updated=true;}const missingScripts=phase3Scripts.filter(script=>!content.includes(script.match(/src="([^"]+)"/)[1]));if(missingScripts.length>0){const scriptsToAdd=missingScripts.join('\n ');content=content.replace('</body>',` ${scriptsToAdd}\n ${initScript}\n</body>`);updated=true;}if(updated){await fs.writeFile(filePath,content);updatedCount++;}else{}}catch(error){console.error(`‚ùå Error updating ${file}:`,error.message);}}}updateAllPages().catch(console.error);module.exports=updateAllPages;