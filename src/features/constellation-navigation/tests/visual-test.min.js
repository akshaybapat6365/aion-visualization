const puppeteer=require('puppeteer');const Tesseract=require('tesseract.js');const fs=require('fs');const path=require('path');const TEST_URL='http:const SCREENSHOT_DIR=path.join(__dirname,'visual-regression');if(!fs.existsSync(SCREENSHOT_DIR)){fs.mkdirSync(SCREENSHOT_DIR,{recursive:true});}async function waitForConstellation(page){await page.waitForSelector('#loading',{hidden:true,timeout:10000});await page.waitForSelector('canvas',{visible:true});await page.waitForTimeout(2000);}async function captureScreenshot(page,name){const timestamp=new Date().toISOString().replace(/:/g,'-');const filename=`${name}-${timestamp}.png`;const filepath=path.join(SCREENSHOT_DIR,filename);await page.screenshot({path:filepath,fullPage:true});return filepath;}async function performOCR(imagePath){const{data:{text,confidence}}=await Tesseract.recognize(imagePath,'eng',{logger:m=>});return{text,confidence};}async function testConstellationRendering(){const browser=await puppeteer.launch({headless:false,args:['--no-sandbox','--disable-setuid-sandbox']});try{const page=await browser.newPage();await page.setViewport({width:1920,height:1080});await page.goto(TEST_URL,{waitUntil:'networkidle2'});await waitForConstellation(page);const screenshot1=await captureScreenshot(page,'initial-render');await page.evaluate(()=>{const canvas=document.querySelector('canvas');const rect=canvas.getBoundingClientRect();const event=new MouseEvent('click',{clientX:rect.left+rect.width/2,clientY:rect.top+rect.height/2,bubbles:true});canvas.dispatchEvent(event);});await page.waitForTimeout(1000);const screenshot2=await captureScreenshot(page,'node-clicked');await page.select('#quality','ultra');await page.waitForTimeout(1000);const screenshot3=await captureScreenshot(page,'quality-ultra');const performance=await page.evaluate(()=>{return{fps:document.getElementById('fps').textContent,drawCalls:document.getElementById('drawCalls').textContent,triangles:document.getElementById('triangles').textContent,memory:document.getElementById('memory').textContent};});const ocrResult=await performOCR(screenshot1);+'...');const expectedTexts=['Navigation Controls','Quality','FPS','AION'];const foundTexts=expectedTexts.filter(text=>ocrResult.text.includes(text));const results={timestamp:new Date().toISOString(),tests:{rendering:true,interaction:true,quality:true,performance:performance,ocr:{confidence:ocrResult.confidence,foundTexts:foundTexts.length,expectedTexts:expectedTexts.length}},screenshots:[screenshot1,screenshot2,screenshot3]};const resultsPath=path.join(SCREENSHOT_DIR,'test-results.json');fs.writeFileSync(resultsPath,JSON.stringify(results,null,2));return results;}catch(error){console.error('Test failed:',error);throw error;}finally{await browser.close();}}async function runVisualRegression(){try{const results=await testConstellationRendering();const allPassed=results.tests.rendering&&results.tests.interaction&&results.tests.quality&&results.tests.ocr.foundTexts>=results.tests.ocr.expectedTexts*0.8;if(allPassed){}else{process.exit(1);}}catch(error){console.error('\n‚ùå Visual test suite failed:',error.message);process.exit(1);}}if(require.main===module){runVisualRegression();}module.exports={testConstellationRendering,runVisualRegression};