/**
 * Build script to compile and integrate design system features
 * Copies and processes liquid transitions and magnetic cursor into production assets
 */

import { promises as fs } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Define source and destination paths
const PATHS = {
  liquidCSS: {
    src: 'src/design-system/navigation/transitions/liquid-morphing.css',
    dest: 'assets/css/liquid-morphing.css'
  },
  magneticJS: {
    src: 'src/features/magnetic-cursor',
    dest: 'assets/js/magnetic-cursor'
  },
  designSystemCSS: {
    src: 'src/design-system',
    dest: 'assets/css/design-system.css'
  }
};

// Ensure directories exist
async function ensureDir(dirPath) {
  try {
    await fs.mkdir(dirPath, { recursive: true });
  } catch (err) {
    console.error(`Error creating directory ${dirPath}:`, err);
  }
}

// Copy file with optional processing
async function copyFile(src, dest, processor = null) {
  try {
    let content = await fs.readFile(src, 'utf8');
    
    if (processor) {
      content = processor(content);
    }
    
    await fs.writeFile(dest, content);
    console.log(`‚úì Copied: ${src} ‚Üí ${dest}`);
  } catch (err) {
    console.error(`‚úó Error copying ${src}:`, err.message);
  }
}

// Copy directory recursively
async function copyDirectory(src, dest) {
  await ensureDir(dest);
  
  const entries = await fs.readdir(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      await copyDirectory(srcPath, destPath);
    } else if (entry.isFile() && (entry.name.endsWith('.js') || entry.name.endsWith('.css'))) {
      await copyFile(srcPath, destPath);
    }
  }
}

// Combine multiple CSS files into one
async function combineCSS(files, outputFile) {
  let combined = `/**
 * Combined Design System CSS
 * Generated by build script
 * Includes: Liquid Morphing Transitions and other design system styles
 */

`;

  for (const file of files) {
    try {
      const content = await fs.readFile(file, 'utf8');
      combined += `\n/* ========== ${path.basename(file)} ========== */\n`;
      combined += content + '\n';
    } catch (err) {
      console.warn(`Could not read ${file}:`, err.message);
    }
  }

  await fs.writeFile(outputFile, combined);
  console.log(`‚úì Combined CSS ‚Üí ${outputFile}`);
}

// Create a bundle for magnetic cursor
async function bundleMagneticCursor() {
  const bundleContent = `/**
 * Magnetic Cursor Bundle
 * Combines all magnetic cursor modules into a single file for production
 */

(function() {
  'use strict';

  // Module loader polyfill for browser
  const modules = {};
  const require = (name) => modules[name];
  const define = (name, factory) => {
    modules[name] = factory();
  };

`;

  // Read and bundle all magnetic cursor files
  const files = [
    'core/MagneticField.js',
    'core/CursorTracker.js',
    'core/MagneticInteraction.js',
    'effects/MagneticButton.js',
    'effects/MagneticLink.js',
    'effects/MagneticTrail.js',
    'config/presets.js',
    'index.js'
  ];

  for (const file of files) {
    const filePath = path.join(PATHS.magneticJS.src, file);
    try {
      let content = await fs.readFile(filePath, 'utf8');
      
      // Remove ES6 imports/exports for bundling
      content = content.replace(/^import .* from .*$/gm, '');
      content = content.replace(/^export\s+{[^}]*};?\s*$/gm, '');
      content = content.replace(/^export\s+default\s+/gm, 'modules.default = ');
      content = content.replace(/^export\s+(?:const|let|var|class|function)\s+(\w+)/gm, 'modules.$1 = $1;\n$&');
      
      bundleContent += `\n  // === ${file} ===\n`;
      bundleContent += content + '\n';
    } catch (err) {
      console.error(`Could not bundle ${file}:`, err.message);
    }
  }

  bundleContent += `
  // Initialize magnetic cursor system globally
  window.MagneticCursorSystem = modules.MagneticCursorSystem || MagneticCursorSystem;
  
  // Auto-initialize if data attribute is present
  if (document.currentScript?.dataset.autoInit === 'true' || document.querySelector('[data-magnetic-init]')) {
    document.addEventListener('DOMContentLoaded', () => {
      window.magneticCursor = new (modules.MagneticCursorSystem || MagneticCursorSystem)({
        autoInit: true,
        enableTrail: true,
        enableButtons: true,
        enableLinks: true
      });
    });
  }
})();
`;

  await ensureDir('assets/js');
  await fs.writeFile('assets/js/magnetic-cursor.js', bundleContent);
  console.log('‚úì Bundled magnetic cursor system');
}

// Main build function
async function build() {
  console.log('üî® Building design system features...\n');

  // Ensure asset directories exist
  await ensureDir('assets/css');
  await ensureDir('assets/js');

  // Copy liquid morphing CSS
  await copyFile(PATHS.liquidCSS.src, PATHS.liquidCSS.dest);

  // Bundle magnetic cursor system
  await bundleMagneticCursor();

  // Combine design system CSS files
  const cssFiles = [
    'src/design-system/core/reset.css',
    'src/design-system/core/colors.css',
    'src/design-system/core/typography.css',
    'src/design-system/core/spacing.css',
    'src/design-system/core/layout.css',
    'src/design-system/navigation/transitions/liquid-morphing.css'
  ];

  await combineCSS(cssFiles, PATHS.designSystemCSS.dest);

  // Create production-ready integration file
  const integrationScript = `/**
 * Design System Integration
 * Loads and initializes premium features
 */

document.addEventListener('DOMContentLoaded', function() {
  // Initialize magnetic cursor if available
  if (window.MagneticCursorSystem) {
    window.magneticCursor = new MagneticCursorSystem({
      autoInit: true,
      enableTrail: true,
      enableButtons: true,
      enableLinks: true,
      performanceMode: 'auto'
    });
    
    console.log('‚ú® Magnetic cursor system initialized');
  }

  // Add liquid transition classes to navigation
  const navLinks = document.querySelectorAll('nav a, .nav-link');
  navLinks.forEach(link => {
    link.classList.add('liquid-transition');
  });

  // Apply liquid transitions to page changes
  if (window.location.pathname.includes('chapter')) {
    document.body.classList.add('liquid-morph-active');
  }

  console.log('‚ú® Design system features loaded');
});
`;

  await fs.writeFile('assets/js/design-system-init.js', integrationScript);
  console.log('‚úì Created integration script');

  console.log('\n‚úÖ Build complete! Features are ready for production.');
  console.log('\nüìù Next steps:');
  console.log('1. Update HTML files to include the built assets');
  console.log('2. Test the features locally');
  console.log('3. Commit and push to GitHub');
}

// Run build
build().catch(console.error);