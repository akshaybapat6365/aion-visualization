class WebGLErrorHandler{constructor(){this.contextLostCount=0;this.maxContextLossRecoveries=3;this.isContextLost=false;this.canvas=null;this.renderer=null;this.onContextLost=null;this.onContextRestored=null;}init(canvas,renderer){this.canvas=canvas;this.renderer=renderer;canvas.addEventListener('webglcontextlost',this.handleContextLost.bind(this),false);canvas.addEventListener('webglcontextrestored',this.handleContextRestored.bind(this),false);this.startErrorMonitoring();}handleContextLost(event){event.preventDefault();this.isContextLost=true;this.contextLostCount++;AionUtils.errors.show('Graphics context lost. Attempting to recover...','warning');if(this.renderer){this.renderer.setAnimationLoop(null);}if(this.onContextLost){this.onContextLost();}if(this.contextLostCount<=this.maxContextLossRecoveries){setTimeout(()=>{this.attemptRecovery();},1000);}else{this.showFinalError();}}handleContextRestored(event){this.isContextLost=false;AionUtils.errors.show('Graphics context recovered successfully!','success');try{this.reinitializeRenderer();if(this.onContextRestored){this.onContextRestored();}}catch(error){console.error('Failed to reinitialize after context restore:',error);this.showRecoveryError();}}attemptRecovery(){try{const gl=this.canvas.getContext('webgl')||this.canvas.getContext('experimental-webgl');if(!gl){throw new Error('Could not get WebGL context');}if(!gl.isContextLost()){this.handleContextRestored();}}catch(error){console.error('Recovery attempt failed:',error);if(this.contextLostCount<=this.maxContextLossRecoveries){setTimeout(()=>this.attemptRecovery(),2000);}else{this.showFinalError();}}}reinitializeRenderer(){if(!this.renderer)return;this.renderer.dispose();const THREE=window.THREE;if(!THREE){throw new Error('Three.js not available');}this.renderer=new THREE.WebGLRenderer({canvas:this.canvas,antialias:false,powerPreference:'default'});}startErrorMonitoring(){if(!this.canvas)return;const checkForErrors=()=>{const gl=this.canvas.getContext('webgl')||this.canvas.getContext('experimental-webgl');if(gl&&!this.isContextLost){const error=gl.getError();if(error!==gl.NO_ERROR){this.handleWebGLError(error,gl);}}if(!this.isContextLost){requestAnimationFrame(checkForErrors);}};checkForErrors();}handleWebGLError(error,gl){let errorMessage='Unknown WebGL error';let canRecover=true;switch(error){case gl.INVALID_ENUM:errorMessage='Invalid enumeration parameter';break;case gl.INVALID_VALUE:errorMessage='Invalid value parameter';break;case gl.INVALID_OPERATION:errorMessage='Invalid operation';break;case gl.OUT_OF_MEMORY:errorMessage='Out of memory';canRecover=false;break;case gl.CONTEXT_LOST_WEBGL:errorMessage='WebGL context lost';return;}console.error('WebGL Error:',errorMessage,error);if(!canRecover){this.showFatalError(errorMessage);}else{AionUtils.errors.show(`Graphics error:${errorMessage}`,'warning');}}showFinalError(){const message=`<div class="webgl-final-error"><h3>Graphics Unavailable</h3><p>Your graphics system encountered multiple errors and cannot recover.</p><p>Please try:</p><ul><li>Refreshing the page</li><li>Updating your browser</li><li>Checking for graphics driver updates</li></ul><button onclick="window.location.reload()">Refresh Page</button></div>`;AionUtils.errors.show(message,'fatal');}showRecoveryError(){const message=`<div class="webgl-recovery-error"><p>Graphics context recovered but reinitialization failed.</p><button onclick="window.location.reload()">Refresh Page</button></div>`;AionUtils.errors.show(message,'error');}showFatalError(details){const message=`<div class="webgl-fatal-error"><h3>Graphics System Error</h3><p>A fatal graphics error occurred:${details}</p><p>The visualization cannot continue.</p><button onclick="window.location.reload()">Refresh Page</button></div>`;AionUtils.errors.show(message,'fatal');}static checkSupport(){try{const canvas=document.createElement('canvas');const gl=canvas.getContext('webgl')||canvas.getContext('experimental-webgl');return!!gl;}catch(error){return false;}}static getCapabilities(){const canvas=document.createElement('canvas');const gl=canvas.getContext('webgl')||canvas.getContext('experimental-webgl');if(!gl)return null;return{vendor:gl.getParameter(gl.VENDOR),renderer:gl.getParameter(gl.RENDERER),version:gl.getParameter(gl.VERSION),maxTextureSize:gl.getParameter(gl.MAX_TEXTURE_SIZE),maxVertexAttributes:gl.getParameter(gl.MAX_VERTEX_ATTRIBS),maxViewportDims:gl.getParameter(gl.MAX_VIEWPORT_DIMS)};}}window.WebGLErrorHandler=WebGLErrorHandler;