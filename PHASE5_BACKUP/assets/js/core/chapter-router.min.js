class ChapterRouter {
constructor() {
this.routes = new Map();
this.currentRoute = null;
this.history = [];
this.maxHistory = 20;
this.transitionDuration = 300;
this.isTransitioning = false;
this.init();
}
init() {
this.setupRoutes();
this.setupEventListeners();
this.loadInitialRoute();
}
setupRoutes() {
const routes = [
{ path: '/', component: 'home', title: 'Aion - Home' },
{ path: '/index.html', component: 'home', title: 'Aion - Home' },
{ path: '/chapters.html', component: 'chapters-list', title: 'Standard Chapters' },
{ path: '/enhanced-chapters.html', component: 'enhanced-chapters-list', title: 'Enhanced Chapters' },
{ path: '/journey.html', component: 'journey', title: 'Your Journey' },
{ path: '/about.html', component: 'about', title: 'About Aion' },
...Array.from({length: 14}, (_, i) => ({
path: `/chapter${i + 1}.html`,
component: 'standard-chapter',
title: `Chapter ${i + 1}`,
chapterId: i + 1,
type: 'standard'
})),
...Array.from({length: 14}, (_, i) => ({
path: `/enhanced-chapter${i + 1}.html`,
component: 'enhanced-chapter',
title: `Enhanced Chapter ${i + 1}`,
chapterId: i + 1,
type: 'enhanced'
}))
];
routes.forEach(route => {
this.routes.set(route.path, route);
});
}
setupEventListeners() {
window.addEventListener('popstate', (event) => {
if (event.state && event.state.route) {
this.navigate(event.state.route, false);
} else {
this.loadInitialRoute();
}
});
document.addEventListener('click', (event) => {
const link = event.target.closest('a[href]');
if (link && this.shouldIntercept(link)) {
event.preventDefault();
this.navigate(link.getAttribute('href'));
}
});
document.addEventListener('keydown', (event) => {
if (event.altKey && event.key === 'ArrowLeft') {
event.preventDefault();
this.goBack();
} else if (event.altKey && event.key === 'ArrowRight') {
event.preventDefault();
this.goForward();
}
});
}
shouldIntercept(link) {
const href = link.getAttribute('href');
if (href.startsWith('http') || href.startsWith('
return false;
}
if (link.getAttribute('target') === '_blank') {
return false;
}
if (link.hasAttribute('download')) {
return false;
}
if (href.startsWith('mailto:') || href.startsWith('tel:')) {
return false;
}
return true;
}
loadInitialRoute() {
const path = window.location.pathname;
const route = this.routes.get(path) || this.routes.get('/');
this.navigate(path, false);
}
async navigate(path, addToHistory = true) {
if (this.isTransitioning) {
return false;
}
const route = this.routes.get(path);
if (!route) {
console.warn(`Route not found: ${path}`);
return false;
}
this.isTransitioning = true;
try {
if (addToHistory) {
this.addToHistory(this.currentRoute);
const state = { route: path, timestamp: Date.now() };
if (window.location.pathname !== path) {
history.pushState(state, route.title, path);
}
}
document.title = route.title;
this.dispatchRouteChange(route);
await this.handleRouteType(route);
this.currentRoute = route;
this.saveState();
return true;
} catch (error) {
console.error('Navigation error:', error);
return false;
} finally {
this.isTransitioning = false;
}
}
async handleRouteType(route) {
switch (route.component) {
case 'standard-chapter':
case 'enhanced-chapter':
await this.loadChapter(route);
break;
case 'chapters-list':
await this.loadChaptersList('standard');
break;
case 'enhanced-chapters-list':
await this.loadChaptersList('enhanced');
break;
default:
this.updateUIState(route);
break;
}
}
async loadChapter(route) {
const { chapterId, type } = route;
if (window.navigationSystem) {
window.navigationSystem.updateChapterProgress(chapterId);
}
this.updateChapterUI(chapterId, type);
this.dispatchEvent('chapterLoaded', {
chapterId,
type,
route
});
}
async loadChaptersList(type) {
this.updateChaptersListUI(type);
this.dispatchEvent('chaptersListLoaded', { type });
}
updateUIState(route) {
const navItems = document.querySelectorAll('.nav-item, .nav-link');
navItems.forEach(item => {
const href = item.getAttribute('href');
item.classList.toggle('active', href === route.path);
});
}
updateChapterUI(chapterId, type) {
const chapterNavs = document.querySelectorAll('.chapter-nav');
chapterNavs.forEach(nav => {
const typeElement = nav.querySelector('.chapter-type');
const currentElement = nav.querySelector('.chapter-current');
if (typeElement) {
typeElement.textContent = type === 'enhanced' ? 'Enhanced' : 'Standard';
}
if (currentElement) {
currentElement.textContent = `Chapter ${chapterId}`;
}
});
const progressFills = document.querySelectorAll('.progress-fill-mini');
progressFills.forEach(fill => {
fill.style.width = `${(chapterId / 14) * 100}%`;
});
this.updateChapterNavigation(chapterId, type);
}
updateChapterNavigation(chapterId, type) {
const prevButtons = document.querySelectorAll('.nav-button.prev');
const nextButtons = document.querySelectorAll('.nav-button.next');
prevButtons.forEach(button => {
if (chapterId > 1) {
button.style.display = 'flex';
button.onclick = () => this.navigate(`${type === 'enhanced' ? 'enhanced-' : ''}chapter${chapterId - 1}.html`);
} else {
button.style.display = 'none';
}
});
nextButtons.forEach(button => {
if (chapterId < 14) {
button.style.display = 'flex';
button.onclick = () => this.navigate(`${type === 'enhanced' ? 'enhanced-' : ''}chapter${chapterId + 1}.html`);
} else {
button.style.display = 'none';
}
});
}
updateChaptersListUI(type) {
const chapterCards = document.querySelectorAll('.chapter-card');
chapterCards.forEach(card => {
const isEnhanced = card.dataset.type === 'enhanced';
const shouldShow = (type === 'enhanced' && isEnhanced) || (type === 'standard' && !isEnhanced);
card.style.display = shouldShow ? 'block' : 'none';
});
const tabButtons = document.querySelectorAll('.tab-button');
tabButtons.forEach(button => {
button.classList.toggle('active', button.dataset.tab === type);
});
}
addToHistory(route) {
if (!route) return;
this.history.push({
...route,
timestamp: Date.now()
});
if (this.history.length > this.maxHistory) {
this.history.shift();
}
}
goBack() {
if (this.history.length > 0) {
const previousRoute = this.history.pop();
this.navigate(previousRoute.path, false);
return true;
}
return false;
}
goForward() {
return false;
}
goToChapter(chapterId, type = 'enhanced') {
const path = `${type === 'enhanced' ? 'enhanced-' : ''}chapter${chapterId}.html`;
this.navigate(path);
}
goToNextChapter() {
if (this.currentRoute && this.currentRoute.chapterId) {
const nextId = this.currentRoute.chapterId + 1;
if (nextId <= 14) {
this.goToChapter(nextId, this.currentRoute.type);
return true;
}
}
return false;
}
goToPreviousChapter() {
if (this.currentRoute && this.currentRoute.chapterId) {
const prevId = this.currentRoute.chapterId - 1;
if (prevId >= 1) {
this.goToChapter(prevId, this.currentRoute.type);
return true;
}
}
return false;
}
goToChaptersList(type = 'enhanced') {
const path = type === 'enhanced' ? '/enhanced-chapters.html' : '/chapters.html';
this.navigate(path);
}
goHome() {
this.navigate('/');
}
saveState() {
const state = {
currentRoute: this.currentRoute,
history: this.history.slice(-5),
timestamp: Date.now()
};
try {
localStorage.setItem('aion-router-state', JSON.stringify(state));
} catch (error) {
console.warn('Failed to save router state:', error);
}
}
loadState() {
try {
const saved = localStorage.getItem('aion-router-state');
if (saved) {
const state = JSON.parse(saved);
if (Date.now() - state.timestamp < 3600000) {
this.history = state.history || [];
return state.currentRoute;
}
}
} catch (error) {
console.warn('Failed to load router state:', error);
}
return null;
}
dispatchRouteChange(route) {
this.dispatchEvent('routeChange', { route, router: this });
}
dispatchEvent(eventName, detail) {
const event = new CustomEvent(`aion:${eventName}`, {
detail,
bubbles: true,
cancelable: true
});
document.dispatchEvent(event);
}
getCurrentChapter() {
return this.currentRoute && this.currentRoute.chapterId ? {
id: this.currentRoute.chapterId,
type: this.currentRoute.type || 'standard'
} : null;
}
getAvailableChapters(type = 'enhanced') {
return Array.from({length: 14}, (_, i) => ({
id: i + 1,
path: `${type === 'enhanced' ? 'enhanced-' : ''}chapter${i + 1}.html`,
title: `Chapter ${i + 1}`,
type
}));
}
isCurrentRoute(path) {
return this.currentRoute && this.currentRoute.path === path;
}
getRouterInfo() {
return {
currentRoute: this.currentRoute,
historyLength: this.history.length,
availableRoutes: Array.from(this.routes.keys()),
isTransitioning: this.isTransitioning
};
}
}
const chapterRouter = new ChapterRouter();
if (typeof module !== 'undefined' && module.exports) {
module.exports = { ChapterRouter, chapterRouter };
}
if (typeof window !== 'undefined') {
window.chapterRouter = chapterRouter;
}